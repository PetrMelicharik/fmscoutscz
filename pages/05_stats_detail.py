import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from math import pi

# --- Nastaven√≠ str√°nky ---
st.set_page_config(page_title="FM Scouts CZ - Detail hr√°ƒçe", page_icon="‚öΩ")

# --- Z√°hlav√≠ ---
st.image("logo.jpg", width=150)
st.title("FM Scouts CZ")
st.subheader("Detail hr√°ƒçe")

# --- Naƒçten√≠ dat ---
players = pd.read_excel("players.xlsx")
profiles = pd.read_excel("players_profiles.xlsx")
ratings = pd.read_excel("players_ratings.xlsx")
stats = pd.read_excel("players_stats.xlsx")

# Slouƒçen√≠ v≈°ech tabulek
database = (
    players
    .merge(profiles, on="id")
    .merge(ratings, on="id")
    .merge(stats, on="id")
)

# --- Vyhled√°vac√≠ pole ---
search_name = st.text_input("üîç Zadej jm√©no hr√°ƒçe:")

if search_name:
    # Filtrace podle jm√©na nebo p≈ô√≠jmen√≠
    results = database[
        database["Jm√©no"].str.contains(search_name, case=False, na=False) |
        database["P≈ô√≠jmen√≠"].str.contains(search_name, case=False, na=False)
    ]

    if not results.empty:
        player_names = results["Jm√©no"] + " " + results["P≈ô√≠jmen√≠"]
        selected_player = st.selectbox("Vyber hr√°ƒçe:", player_names)

        if selected_player:
            player_data = results[
                (results["Jm√©no"] + " " + results["P≈ô√≠jmen√≠"]) == selected_player
            ].iloc[0]

            st.markdown(f"### {player_data['Jm√©no']} {player_data['P≈ô√≠jmen√≠']}")
            st.markdown(
                f"**T√Ωm:** {player_data.get('team', 'Nezn√°m√Ω')} | "
                f"**Pozice:** {player_data.get('Pozice', 'N/A')} | "
                f"**Liga:** {player_data.get('tournament_country', 'N/A')}"
            )

            # --- STATISTIKY ---
            st.subheader("üìä Statistiky hr√°ƒçe")

            stats_cols = [
                "appearances", "minutesPlayed", "goals", "expectedGoals", "assists", "expectedAssists",
                "goalsAssistsSum", "totalShots", "shotsOnTarget", "goalsFromInsideTheBox",
                "goalsFromOutsideTheBox", "scoringFrequency", "bigChancesCreated", "totalPasses",
                "keyPasses", "accuratePasses", "passToAssist", "accurateCrosses", "successfulDribbles",
                "aerialDuelsWon", "clearances", "totwAppearances", "rating"
            ]

            # Slovn√≠k pro ƒçesk√© n√°zvy
            stats_czech = {
                "appearances": "Z√°pasy",
                "minutesPlayed": "Odehran√© minuty",
                "goals": "G√≥ly",
                "expectedGoals": "xG",
                "assists": "Asistence",
                "expectedAssists": "xA",
                "goalsAssistsSum": "G√≥ly + Asistence",
                "totalShots": "Celkem st≈ôel",
                "shotsOnTarget": "St≈ôely na br√°nu",
                "goalsFromInsideTheBox": "G√≥ly z v√°pna",
                "goalsFromOutsideTheBox": "G√≥ly z d√°lky",
                "scoringFrequency": "Frekvence sk√≥rov√°n√≠",
                "bigChancesCreated": "Vytvo≈ôen√© ≈°ance",
                "totalPasses": "Celkem p≈ôihr√°vek",
                "keyPasses": "Kl√≠ƒçov√© p≈ôihr√°vky",
                "accuratePasses": "P≈ôesn√© p≈ôihr√°vky",
                "passToAssist": "P≈ôihr√°vky k asistenci",
                "accurateCrosses": "P≈ôesn√© centry",
                "successfulDribbles": "√öspƒõ≈°n√© driblinky",
                "aerialDuelsWon": "Vyhran√© hlaviƒçky",
                "clearances": "Odvody m√≠ƒçe",
                "totwAppearances": "Z√°pasy TOTW",
                "rating": "Pr≈Ømƒõrn√© hodnocen√≠"
            }

            # P≈ôipraven√≠ hodnot a form√°tov√°n√≠
            stats_data = []
            for col in stats_cols:
                val = player_data.get(col, np.nan)
                if pd.isna(val):
                    formatted_val = "NaN"
                else:
                    if col in ["expectedGoals", "expectedAssists", "rating"]:
                        formatted_val = f"{val:.2f}"
                    else:
                        formatted_val = f"{int(val)}"
                stats_data.append({"Statistika": stats_czech.get(col, col), "Hodnota": formatted_val})

            st.table(pd.DataFrame(stats_data))

            # --- PIZZA CHART ---
            st.subheader("üçï Hern√≠ profil hr√°ƒçe (procentu√°ln√≠ statistiky)")

            pizza_cols = [
                "accuratePassesPercentage", "successfulDribblesPercentage", "accurateCrossesPercentage",
                "aerialDuelsWonPercentage", "totalDuelsWonPercentage", "goalConversionPercentage",
                "accurateLongBallsPercentage", "groundDuelsWonPercentage"
            ]

            pizza_labels = [
                "P≈ôesn√© p≈ôihr√°vky %", "√öspƒõ≈°n√© driblinky %", "P≈ôesn√© centry %",
                "Vyhran√© hlaviƒçky %", "Vyhran√© souboje %", "√öspƒõ≈°nost st≈ôel %",
                "P≈ôesn√© dlouh√© m√≠ƒçe %", "Vyhran√© pozemn√≠ souboje %"
            ]

            pizza_data = [player_data.get(col, np.nan) for col in pizza_cols]

            if all(pd.isna(pizza_data)):
                st.info("Procentu√°ln√≠ statistiky nejsou dostupn√©.")
            else:
                values = [v if not pd.isna(v) else 0 for v in pizza_data]
                N = len(pizza_labels)
                angles = [n / float(N) * 2 * pi for n in range(N)]
                values += values[:1]
                angles += angles[:1]

                # --- V√Ωbƒõr barvy podle pozice ---
                pozice = str(player_data.get("Pozice", "")).lower()
                if "brank√°≈ô" in pozice or "gk" in pozice:
                    color = "#ff7f0e"  # oran≈æov√°
                elif any(x in pozice for x in ["obr√°nce", "cb", "rb", "lb", "df"]):
                    color = "#1f77b4"  # modr√°
                elif any(x in pozice for x in ["z√°lo≈æn√≠k", "cm", "dm", "mf"]):
                    color = "#2ca02c"  # zelen√°
                elif any(x in pozice for x in ["√∫toƒçn√≠k", "fw", "st", "w"]):
                    color = "#d62728"  # ƒçerven√°
                else:
                    color = "#9467bd"  # fialov√° default

                # --- Graf ---
                fig, ax = plt.subplots(figsize=(7, 7), subplot_kw=dict(polar=True))
                ax.set_ylim(0, 100)
                ax.set_theta_offset(pi / 2)
                ax.set_theta_direction(-1)

                plt.xticks(angles[:-1], pizza_labels, color='black', size=10)
                ax.set_rgrids([20, 40, 60, 80, 100], color="lightgrey")

                ax.plot(angles, values, linewidth=2.5, linestyle='solid', color=color)
                ax.fill(angles, values, alpha=0.35, color=color)

                # popisky hodnot
                for angle, value in zip(angles[:-1], values[:-1]):
                    ax.text(
                        angle, value + 3, f"{value:.1f}%", color="black",
                        fontsize=9, ha='center', va='center', fontweight='bold'
                    )

                ax.spines['polar'].set_visible(False)
                ax.grid(True, color="lightgrey", linestyle="--", linewidth=0.8)
                ax.set_facecolor("#f9f9f9")

                st.pyplot(fig)

    else:
        st.warning("‚ùå Hr√°ƒç nenalezen. Zkus jin√© jm√©no.")
